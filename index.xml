<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nowhere</title>
    <link>https://killmonday.github.io/</link>
    <description>Recent content on nowhere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2020 ownhp. All rights reserved.</copyright>
    <lastBuildDate>Tue, 25 Feb 2020 12:45:06 +0800</lastBuildDate>
    
	<atom:link href="https://killmonday.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NTFS权限管理</title>
      <link>https://killmonday.github.io/posts/1.%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/1.%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/ntfs%E6%9D%83%E9%99%90/</link>
      <pubDate>Tue, 25 Feb 2020 12:45:06 +0800</pubDate>
      
      <guid>https://killmonday.github.io/posts/1.%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/1.%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/ntfs%E6%9D%83%E9%99%90/</guid>
      <description>1.设权限的意义   使不同用户对文件/文件夹有不同的访问权限，防止资源被篡改、删除。
  例如IT部和人力资源部有各自的文件夹，相互之间的访问有限制。
  2.NTFS文件系统特点 可加密 保护物理安全，防止被偷窃的计算机泄密。
访问控制列表（设置权限） 属性中可以用&amp;quot;安全&amp;quot;选项卡设置各用户权限。
权限列表 取消继承 A用户创建的文件/文件夹的ACL表，如果想删除表中从父目录继承得到的组/用户，必须先取消父继承，然后就可以删除管理员等。
但是，管理员有特权可以修改文件/文件夹的所有者，它可以修改所有者为管理员自己，进而修改A用户文件夹的ACL。
权限累加 如果B用户在C组，而B和C都在ACL中，那么最终B用户拥有的权限是B的权限+C组拥有的权限。
如果不希望B拥有C组在该文件夹的权限，但又不方便从C组删除用户B（用户B可能还需要在C组的某些其他权限），可以在该文件夹的ACL中单独设置B用户的拒绝权限。
强制继承 父目录强制子目录继承其ACL：
磁盘利用率   可压缩
  可磁盘配额
  支持单个文件大于4G  3.文件系统 存储文件的方式叫文件系统。它是外部存储设备组织文件的方式。
格式化就是在重做文件系统。</description>
    </item>
    
    <item>
      <title>再也不怕老板突然来公司系列：WiFi探针</title>
      <link>https://killmonday.github.io/posts/2.%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/0.%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80/wifi%E6%8E%A2%E9%92%88/</link>
      <pubDate>Tue, 25 Feb 2020 12:45:06 +0810</pubDate>
      
      <guid>https://killmonday.github.io/posts/2.%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/0.%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80/wifi%E6%8E%A2%E9%92%88/</guid>
      <description>2019年的315晚会提到了WiFi探针，我在玩无线钓鱼实验的时候突发奇想，写了这个脚本。可以：
 实时监测附近设备发出的Probe帧 发现目标设备发出的Probe帧（通过MAC地址确认是目标设备） 调用蜂鸣器硬件发出震动警告  测试时：
 脚本在虚拟机kali linux 2019 x64执行 该虚拟机外接了USB无线网卡（TL-WN821N），并安装了驱动 该网卡已设置工作模式为监听模式（Monitor)。 使用荣耀9（EMUI9)和小米3（MIUI8）作为目标，进行对照试验。  结论：
 以该网卡的性能，可以在10米范围内探测到目标设备出现，并发出警报。 部分手机已启用MAC地址随机化，只有在和路由器连接握手时才能抓到正确MAC地址。 部分手机即使在关闭WLAN后依然对外发送Probe帧。  脚本：
#!/bin/bash # 一旦出错，停止执行剩余指令set -e#airodump-ng在后台执行，并把探测结果实时写入wifi.info(airodump-ng wlan0 &amp;gt;&amp;amp; /root/wifi.info) &amp;amp;while :dogrep &amp;quot;54:C1:41:56:AA:3C&amp;quot; /root/wifi.info#grep匹配成功会返回0if [ $? == 0 ]; then #检测到了目标MAC地址，现在震动蜂鸣器beep -f 300.7 -r 10 -d 100 -l 400#杀掉airodump进程，它的任务已经结束了ps -efww|grep airodump |grep -v grep|cut -c 9-15|xargs kill -9rm /root/wifi.</description>
    </item>
    
    <item>
      <title>服务器远程管理</title>
      <link>https://killmonday.github.io/posts/1.%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/1.%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 25 Feb 2020 12:45:06 +0810</pubDate>
      
      <guid>https://killmonday.github.io/posts/1.%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/1.%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>远程管理方式 1.命令管理-telnet 端口默认23。
开启telnet服务   打开服务win+R services.msc；
  找到服务Task Scheduler和Telnet，分别设为自动启动。
  添加用户到TelnetClients组   我的电脑右键，管理，本地用户和组，组，TelnetClients。
  或命令添加：略。
  telnet登录 telnet &amp;lt;目标IP地址&amp;gt; 2.图形化管理-mstsc 端口默认3389。
开启远程桌面   XP：我的电脑右键，属性，远程，勾选启用。
  WIN10：我的电脑右键，属性，远程设置、
  添加用户到远程桌面组 （管理员不用添加，它所有权限都有）
  我的电脑右键，管理，本地用户和组，组，Remote Desktop Users。
  或命令添加：
  net localgroup &amp;quot;Remote Desktop Users&amp;quot; &amp;lt;用户名&amp;gt; /add</description>
    </item>
    
  </channel>
</rss>